// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–ø–ª–æ—è
const axios = require('axios');

async function checkDeployment() {
  const baseUrl = process.argv[2] || 'https://your-app.vercel.app';
  
  console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ø–ª–æ–π –ø–æ –∞–¥—Ä–µ—Å—É: ${baseUrl}`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
    const mainResponse = await axios.get(baseUrl, { 
      timeout: 10000,
      validateStatus: function (status) {
        return status < 500; // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—ã–µ —Å—Ç–∞—Ç—É—Å—ã –º–µ–Ω—å—à–µ 500
      }
    });
    
    if (mainResponse.status === 200) {
      console.log('‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: OK');
    } else if (mainResponse.status === 401) {
      console.log('‚ö†Ô∏è  –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401)');
      console.log('   –≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π');
    } else {
      console.log(`‚ö†Ô∏è  –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: —Å—Ç–∞—Ç—É—Å ${mainResponse.status}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º API...');
    try {
      const healthResponse = await axios.get(`${baseUrl}/api/health`, { 
        timeout: 10000,
        validateStatus: function (status) {
          return status < 500;
        }
      });
      
      if (healthResponse.status === 200) {
        console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç:', healthResponse.data);
      } else {
        console.log(`‚ö†Ô∏è  API: —Å—Ç–∞—Ç—É—Å ${healthResponse.status}`);
      }
    } catch (apiError) {
      console.log('‚ö†Ô∏è  API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', apiError.message);
    }
    
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:');
    console.log(`üì± URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${baseUrl}`);
    console.log(`üîó API endpoint: ${baseUrl}/api/health`);
    
    if (mainResponse.status === 401) {
      console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –≤ –ø–∞–Ω–µ–ª–∏ Vercel');
      console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ –ø—É–±–ª–∏—á–Ω—ã–π');
      console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Vercel');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–ø–ª–æ—è:', error.message);
    console.log('\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('1. URL –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ');
    console.log('2. –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
    console.log('3. –ü—Ä–æ–±–ª–µ–º—ã —Å CORS');
    console.log('4. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Vercel');
    console.log('5. –ü—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π');
  }
}

checkDeployment();
