const axios = require('axios');

const API_BASE_URL = 'https://bd-app-umber.vercel.app/api';

async function testServerAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ...\n');

  try {
    // –¢–µ—Å—Ç 1: Health check
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint...');
    const healthResponse = await axios.get(`${API_BASE_URL}/health`);
    console.log('‚úÖ Health check:', healthResponse.data);

    // –¢–µ—Å—Ç 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const testUserId = 'test-sync-user-' + Date.now();
    const userData = {
      userId: testUserId,
      userData: {
        name: '–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
        email: 'sync@test.com',
        guests: [
          { id: '1', name: '–ì–æ—Å—Ç—å —Å –Ω–æ—É—Ç–±—É–∫–∞', email: 'laptop@test.com', status: 'confirmed' }
        ],
        wishlist: [],
        location: { name: '', address: '', date: '', time: '' },
        photos: []
      }
    };

    const saveUserResponse = await axios.post(`${API_BASE_URL}/users`, userData);
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', saveUserResponse.data);

    // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞...');
    const getUserResponse = await axios.get(`${API_BASE_URL}/users?userId=${testUserId}`);
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞:', getUserResponse.data);

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Å—Ç–µ–π
    if (getUserResponse.data && getUserResponse.data.guests) {
      console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Å—Ç–µ–π:');
      console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:', getUserResponse.data.guests.length);
      getUserResponse.data.guests.forEach((guest, index) => {
        console.log(`  –ì–æ—Å—Ç—å ${index + 1}: ${guest.name} (${guest.email}) - ${guest.status}`);
      });
    }

    console.log('\nüéâ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    console.log('üì± –¢–µ–ø–µ—Ä—å –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º –∏ –≤–æ–π–¥–∏—Ç–µ —Å —Ç–µ–º –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    console.log(`üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞: ${testUserId}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:', error.response?.data || error.message);
    
    if (error.code === 'ENOTFOUND') {
      console.log('\nüí° –ü—Ä–æ–±–ª–µ–º–∞ —Å DNS. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL —Å–µ—Ä–≤–µ—Ä–∞.');
    } else if (error.response?.status === 404) {
      console.log('\nüí° API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Vercel.');
    } else if (error.response?.status === 500) {
      console.log('\nüí° –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ Vercel Dashboard.');
    }
  }
}

testServerAPI();
